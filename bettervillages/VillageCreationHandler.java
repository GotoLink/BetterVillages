package bettervillages;

import net.minecraft.util.EnumFacing;
import net.minecraft.util.MathHelper;
import net.minecraft.world.gen.structure.StructureComponent;
import net.minecraft.world.gen.structure.StructureVillagePieces;
import net.minecraftforge.fml.common.registry.VillagerRegistry.IVillageCreationHandler;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.List;
import java.util.Random;

/**
 * Generalized village component creation
 */
public final class VillageCreationHandler implements IVillageCreationHandler {
    /**
     * The component class to be generated by this instance
     */
    private final Class<?> piece;
    /**
     * Values used to determine the village piece weight and limit number
     */
    private final int weight, min, max, multiplier;
    /**
     * Cache for reflection-caught generation method
     */
    private Method generate;

    public VillageCreationHandler(Class<?> structure, int data, int min, int max, int multi) {
        this.piece = structure;
        this.weight = data;
        this.min = min;
        this.max = max;
        this.multiplier = multi;

        Method[] meths = piece.getDeclaredMethods();
        for (Method meth : meths) {
            int mod = meth.getModifiers();
            if (Modifier.isPublic(mod) && Modifier.isStatic(mod) && meth.getParameterTypes().length == 8) {
                if (StructureComponent.class.isAssignableFrom(meth.getReturnType())) {
                    generate = meth;
                    break;
                }
            }
        }
        if (generate == null)
            throw new IllegalArgumentException(structure + " didn't have a compatible generation method");
    }

    /**
     * Invokes a public static method through refection to generate a structure component based on the villagePiece argument
     *
     * @return The generated structure component, or null if no valid method could be found
     */
    @Override
    public Object buildComponent(StructureVillagePieces.PieceWeight villagePiece, StructureVillagePieces.Start startPiece, @SuppressWarnings("rawtypes") List pieces, Random random, int p1, int p2, int p3, EnumFacing p4, int p5) {
        Object obj = null;
        try {
            obj = generate.invoke(null, startPiece, pieces, random, p1, p2, p3, p4, p5);
        } catch (ReflectiveOperationException e) {
            e.printStackTrace();
        }
        return obj;
    }

    /**
     * @return The component class to be generated by this instance
     */
    @Override
    public Class<?> getComponentClass() {
        return piece;
    }

    /**
     * @return Converted village piece weight
     */
    @Override
    public StructureVillagePieces.PieceWeight getVillagePieceWeight(Random random, int i) {
        return new BetterStructureVillagePieceWeight(piece, weight, MathHelper.getRandomIntegerInRange(random, min + i, max + i * multiplier));
    }
}
