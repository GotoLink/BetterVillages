package bettervillages;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import net.minecraft.util.MathHelper;
import cpw.mods.fml.common.registry.VillagerRegistry.IVillageCreationHandler;
import net.minecraft.world.gen.structure.StructureComponent;
import net.minecraft.world.gen.structure.StructureVillagePieces;

/**
 * Generalized village component creation
 */
public class VillageCreationHandler implements IVillageCreationHandler {
    /**
     * The component class to be generated by this instance
     */
	private Class<?> piece;
    /**
     * Values used to determine the village piece weight and limit number
     */
	private int weight, min, max, multiplier;
    /**
        Cache for reflection-caught generation methods
     */
	private static Map<String, Method> methMap = new HashMap<String, Method>();

	public VillageCreationHandler(Class<?> structure, int data, int min, int max, int multi) {
		this.piece = structure;
		this.weight = data;
		this.min = min;
		this.max = max;
		this.multiplier = multi;
	}

    /**
     * Searches and invokes a public static method through refection to generate a structure component based on the villagePiece argument
     * @return The generated structure component, or null if no valid method could be found
     */
	@Override
	public Object buildComponent(StructureVillagePieces.PieceWeight villagePiece, StructureVillagePieces.Start startPiece, @SuppressWarnings("rawtypes") List pieces, Random random, int p1, int p2, int p3, int p4, int p5) {
		Class<?> clazz = villagePiece.villagePieceClass;
		Object obj = null;
		if (!methMap.containsKey(clazz.getName())) {
			Method[] meths = clazz.getDeclaredMethods();
			for (Method meth : meths) {
				int mod = meth.getModifiers();
				if (Modifier.isPublic(mod) && Modifier.isStatic(mod)) {
					try {
						obj = meth.invoke(null, startPiece, pieces, random, p1, p2, p3, p4, p5);
						if (StructureComponent.class.isInstance(obj)) {
							methMap.put(clazz.getName(), meth);
							break;
						}
					} catch (ReflectiveOperationException e) {
						e.printStackTrace();
					}
				}
			}
		} else {
			try {
				obj = methMap.get(clazz.getName()).invoke(null, startPiece, pieces, random, p1, p2, p3, p4, p5);
			} catch (ReflectiveOperationException e) {
				e.printStackTrace();
			}
		}
		return obj;
	}

    /**
     *
     * @return The component class to be generated by this instance
     */
	@Override
	public Class<?> getComponentClass() {
		return piece;
	}

    /**
     *
     * @return Converted village piece weight
     */
	@Override
	public StructureVillagePieces.PieceWeight getVillagePieceWeight(Random random, int i) {
		return new BetterStructureVillagePieceWeight(piece, weight, MathHelper.getRandomIntegerInRange(random, min + i, max + i * multiplier));
	}
}
